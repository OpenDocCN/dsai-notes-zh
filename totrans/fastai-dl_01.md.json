["```py\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline*# This file contains all the main external libs we'll use*\n**from** **fastai.imports** **import** ***from** **fastai.transforms** **import** *\n**from** **fastai.conv_learner** **import** *\n**from** **fastai.model** **import** *\n**from** **fastai.dataset** **import** *\n**from** **fastai.sgdr** **import** *\n**from** **fastai.plots** **import** *PATH = \"data/dogscats/\"\nsz=224\n```", "```py\n!ls {PATH}*models\tsample\ttest1  tmp  train  valid*\n```", "```py\n!ls {PATH}valid*cats  dogs*files = !ls {PATH}valid/cats | head\nfiles*['cat.10016.jpg',\n 'cat.1001.jpg',\n 'cat.10026.jpg',\n 'cat.10048.jpg',\n 'cat.10050.jpg',\n 'cat.10064.jpg',\n 'cat.10071.jpg',\n 'cat.10091.jpg',\n 'cat.10103.jpg',\n 'cat.10104.jpg']*\n```", "```py\nimg = plt.imread(f'**{PATH}**valid/cats/**{files[0]}**')\nplt.imshow(img);\n```", "```py\nimg.shape*(198, 179, 3)*img[:4,:4]*array([[[ 29,  20,  23],\n        [ 31,  22,  25],\n        [ 34,  25,  28],\n        [ 37,  28,  31]],**[[ 60,  51,  54],\n        [ 58,  49,  52],\n        [ 56,  47,  50],\n        [ 55,  46,  49]],**[[ 93,  84,  87],\n        [ 89,  80,  83],\n        [ 85,  76,  79],\n        [ 81,  72,  75]],**[[104,  95,  98],\n        [103,  94,  97],\n        [102,  93,  96],\n        [102,  93,  96]]], dtype=uint8)*\n```", "```py\n**data** = ImageClassifierData.from_paths(PATH, tfms=tfms_from_model(resnet34, sz))\n**learn** = ConvLearner.pretrained(resnet34, data, precompute=**True**)\n**learn.fit**(0.01, 3)*[ 0\\.       0.04955  0.02605  0.98975]                         \n[ 1\\.       0.03977  0.02916  0.99219]                         \n[ 2\\.       0.03372  0.02929  0.98975]*\n```", "```py\ndata.val_y*array([0, 0, 0, ..., 1, 1, 1])*\n```", "```py\ndata.classes*['cats', 'dogs']*\n```", "```py\nlog_preds = learn.predict()\nlog_preds.shape*(2000, 2)*log_preds[:10]*array([[ -0.00002, -11.07446],\n       [ -0.00138,  -6.58385],\n       [ -0.00083,  -7.09025],\n       [ -0.00029,  -8.13645],\n       [ -0.00035,  -7.9663 ],\n       [ -0.00029,  -8.15125],\n       [ -0.00002, -10.82139],\n       [ -0.00003, -10.33846],\n       [ -0.00323,  -5.73731],\n       [ -0.0001 ,  -9.21326]], dtype=float32)*\n```", "```py\npreds = np.argmax(log_preds, axis=1)  *# from log probabilities to 0 or 1*\nprobs = np.exp(log_preds[:,1])        *# pr(dog)*\n```", "```py\n*# 1\\. A few correct labels at random* plot_val_with_title(rand_by_correct(**True**), \"Correctly classified\")\n```", "```py\n*# 2\\. A few incorrect labels at random*\nplot_val_with_title(rand_by_correct(**False**), \"Incorrectly classified\")\n```", "```py\nplot_val_with_title(most_by_correct(0, **True**), \"Most correct cats\")\n```", "```py\nplot_val_with_title(most_by_correct(1, **True**), \"Most correct dogs\")\n```", "```py\nplot_val_with_title(most_by_correct(0, **False**), \"Most incorrect cats\")\n```", "```py\nplot_val_with_title(most_by_correct(1, **False**), \"Most incorrect dogs\")\n```", "```py\nmost_uncertain = np.argsort(np.abs(probs -0.5))[:4]\nplot_val_with_title(most_uncertain, \"Most uncertain predictions\")\n```", "```py\nlearn.fit(0.01, 3)\n```", "```py\nlearn = ConvLearner.pretrained(arch, data, precompute=**True**)\nlearn.lr_find()\n```", "```py\nlearn.sched.plot_lr()\n```", "```py\nlearn.sched.plot()\n```", "```py\n*[ 0\\.       0.04955  0.02605  0.98975]                         \n[ 1\\.       0.03977  0.02916  0.99219]                         \n[ 2\\.       0.03372  0.02929  0.98975]*\n```"]