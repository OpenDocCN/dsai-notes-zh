["```py\n*[ 0\\.       0.04955  0.02605  0.98975]*\n```", "```py\ntfms = tfms_from_model(resnet34, sz, **aug_tfms=transforms_side_on**, max_zoom=1.1)\n```", "```py\ndata = ImageClassifierData.from_paths(PATH, tfms=**tfms**)\nlearn = ConvLearner.pretrained(arch, data, precompute=True)learn.fit(1e-2, 1)\n```", "```py\nlearn.precompute=Falselearn.fit(1e-2, 3, **cycle_len=1**)*[ 0\\.       0.03597  0.01879  0.99365]                         \n[ 1\\.       0.02605  0.01836  0.99365]                         \n[ 2\\.       0.02189  0.0196   0.99316]*\n```", "```py\nlearn.save('224_lastlayer')learn.load('224_lastlayer')\n```", "```py\nlearn.unfreeze()\n```", "```py\nlr=np.array([1e-4,1e-3,1e-2])\n```", "```py\nlearn.fit(lr, 3, cycle_len=1, **cycle_mult**=2)*[ 0\\.       0.04538  0.01965  0.99268]                          \n[ 1\\.       0.03385  0.01807  0.99268]                          \n[ 2\\.       0.03194  0.01714  0.99316]                          \n[ 3\\.       0.0358   0.0166   0.99463]                          \n[ 4\\.       0.02157  0.01504  0.99463]                          \n[ 5\\.       0.0196   0.0151   0.99512]                          \n[ 6\\.       0.01356  0.01518  0.9956 ]*\n```", "```py\nlog_preds,y = **learn.TTA()**\nprobs = np.mean(np.exp(log_preds),0)accuracy(probs, y)*0.99650000000000005*\n```", "```py\npreds = np.argmax(probs, axis=1)\nprobs = probs[:,1]**from** **sklearn.metrics** **import** confusion_matrix\ncm = confusion_matrix(y, preds)plot_confusion_matrix(cm, data.classes)\n```", "```py\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inlinefrom fastai.imports import *\nfrom fastai.transforms import *\nfrom fastai.conv_learner import *\nfrom fastai.model import *\nfrom fastai.dataset import *\nfrom fastai.sgdr import *\nfrom fastai.plots import *PATH = 'data/dogbreed/'\nsz = 224\narch = resnext101_64\nbs=16label_csv = f'{PATH}labels.csv'\nn = len(list(open(label_csv)))-1\nval_idxs = get_cv_idxs(n)!ls {PATH}\n```", "```py\nlabel_df = pd.read_csv(label_csv)\nlabel_df.head()\n```", "```py\nlabel_df.**pivot_table**(index='breed', aggfunc=len).sort_values('id', ascending=False)\n```", "```py\ntfms = tfms_from_model(arch, sz, aug_tfms=transforms_side_on, \n                       max_zoom=1.1)data = ImageClassifierData.from_csv(PATH, 'train', \n                 f'{PATH}labels.csv', test_name='test', \n                 val_idxs=val_idxs, suffix='.jpg', tfms=tfms, bs=bs)\n```", "```py\nfn = PATH + data.trn_ds.fnames[0]; fn*'data/dogbreed/train/001513dfcb2ffafc82cccf4d8bbaba97.jpg'*\n```", "```py\nimg = PIL.Image.open(fn); img\n```", "```py\nimg.size*(500, 375)*\n```", "```py\nsize_d = {k: PIL.Image.open(PATH+k).size for k in data.trn_ds.fnames}\n```", "```py\nrow_sz, col_sz = list(zip(*size_d.values()))\n```", "```py\nplt.hist(row_sz);\n```", "```py\ndef get_data(sz, bs):\n    tfms = tfms_from_model(arch, sz, aug_tfms=transforms_side_on,\n                           max_zoom=1.1)\n    data = ImageClassifierData.from_csv(PATH, 'train', \n               f'{PATH}labels.csv', test_name='test', num_workers=4,\n               val_idxs=val_idxs, suffix='.jpg', tfms=tfms, bs=bs) return data if sz>300 else data.resize(340, 'tmp') \n```", "```py\ndata = get_data(224, bs)learn = ConvLearner.pretrained(arch, data, precompute=True)learn.fit(1e-2, 5)*[0\\.      1.99245 1.0733  0.76178]                             \n[1\\.      1.09107 0.7014  0.8181 ]                             \n[2\\.      0.80813 0.60066 0.82148]                             \n[3\\.      0.66967 0.55302 0.83125]                             \n[4\\.      0.57405 0.52974 0.83564]*\n```", "```py\n**learn.precompute = False**learn.fit(1e-2, 5, **cycle_len**=1)\n```", "```py\nlearn.save('224_pre')\nlearn.load('224_pre')\n```", "```py\nlearn.set_data(get_data(299, bs))\n```", "```py\nlearn.fit(1e-2, 3, cycle_len=1)*[0\\.      0.35614 0.22239 0.93018]                            \n[1\\.      0.28341 0.2274  0.92627]\n[2\\.* ***0.28341******0.2274*** *0.92627]*\n```", "```py\nlearn.fit(1e-2, 3, cycle_len=1, **cycle_mult=2**)[0\\.      0.27171 0.2118  0.93192]                            \n[1\\.      0.28743 0.21008 0.9324 ]\n[2\\.      0.25328 0.20953 0.93288]                            \n[3\\.      0.23716 0.20868 0.93001]\n[4\\.      0.23306 0.20557 0.93384]                            \n[5\\.      0.22175 0.205   0.9324 ]\n[6\\.      0.2067  0.20275 0.9348 ]\n```", "```py\nlog_preds, y = learn.TTA()\nprobs = np.exp(log_preds)\naccuracy(log_preds,y), metrics.log_loss(y, probs)*(0.9393346379647749, 0.20101565705592733)*\n```"]