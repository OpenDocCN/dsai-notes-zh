["```py\n**for** df **in** (joined,joined_test):\n    df[\"CompetitionMonthsOpen\"] = df[\"CompetitionDaysOpen\"]//30\n    df.loc[df.CompetitionMonthsOpen>24, \"CompetitionMonthsOpen\"]= 24\njoined.CompetitionMonthsOpen.unique()*array([24,  3, 19,  9,  0, 16, 17,  7, 15, 22, 11, 13,  2, 23, 12,  4, 10,  1, 14, 20,  8, 18,  6, 21,  5])*\n```", "```py\n**for** df **in** (joined,joined_test):\n    df[\"Promo2Since\"] = pd.to_datetime(df.apply(**lambda** x: Week(\n        x.Promo2SinceYear, x.Promo2SinceWeek).monday(), \n            axis=1).astype(pd.datetime))\n    df[\"Promo2Days\"] = df.Date.subtract(df[\"Promo2Since\"]).dt.days\n```", "```py\n**def** get_elapsed(fld, pre):\n    day1 = np.timedelta64(1, 'D')\n    last_date = np.datetime64()\n    last_store = 0\n    res = []\n\n    **for** s,v,d **in** zip(df.Store.values,df[fld].values, \n                     df.Date.values):\n        **if** s != last_store:\n            last_date = np.datetime64()\n            last_store = s\n        **if** v: last_date = d\n        res.append(((d-last_date).astype('timedelta64[D]') / day1))\n    df[pre+fld] = res\n```", "```py\nfld = 'SchoolHoliday'\ndf = df.sort_values(['Store', 'Date'])\nget_elapsed(fld, 'After')\ndf = df.sort_values(['Store', 'Date'], ascending=[**True**, **False**])\nget_elapsed(fld, 'Before')\n```", "```py\nfld = 'StateHoliday'\ndf = df.sort_values(['Store', 'Date'])\nget_elapsed(fld, 'After')\ndf = df.sort_values(['Store', 'Date'], ascending=[**True**, **False**])\nget_elapsed(fld, 'Before')fld = 'Promo'\ndf = df.sort_values(['Store', 'Date'])\nget_elapsed(fld, 'After')\ndf = df.sort_values(['Store', 'Date'], ascending=[**True**, **False**])\nget_elapsed(fld, 'Before')\n```", "```py\nbwd = df[['Store']+columns].sort_index().groupby(\"Store\"\n                  ).rolling(7, min_periods=1).sum()fwd = df[['Store']+columns].sort_index(ascending=**False**\n                  ).groupby(\"Store\").rolling(7, min_periods=1).sum()\n```", "```py\n**for** v **in** cat_vars: \n    joined[v] = joined[v].astype('category').cat.as_ordered()\n```", "```py\napply_cats(joined_test, joined)\n```", "```py\n**for** v **in** contin_vars:\n    joined[v] = joined[v].fillna(0).astype('float32')\n    joined_test[v] = joined_test[v].fillna(0).astype('float32')\n```", "```py\nidxs = get_cv_idxs(n, val_pct=150000/n)\njoined_samp = joined.iloc[idxs].set_index(\"Date\")\nsamp_size = len(joined_samp); samp_size150000\n```", "```py\nsamp_size = n\njoined_samp = joined.set_index(\"Date\")\n```", "```py\ndf, y, nas, mapper = proc_df(joined_samp, 'Sales', do_scale=**True**)\nyl = np.log(y)\n```", "```py\nval_idx = np.flatnonzero(\n    (df.index<=datetime.datetime(2014,9,17)) & \n    (df.index>=datetime.datetime(2014,8,1)))\n```", "```py\nval_idx=[0]\n```", "```py\nmd = ColumnarModelData.from_data_frame(PATH, val_idx, df, \n                    yl.astype(np.float32), cat_flds=cat_vars, \n                    bs=128, test_df=df_test)\n```", "```py\ncat_sz=[(c, len(joined_samp[c].cat.categories)+1) **for** c **in** cat_vars]cat_sz*[('Store', 1116),\n ('DayOfWeek', 8),\n ('Year', 4),\n ('Month', 13),\n ('Day', 32),\n ('StateHoliday', 3),\n ('CompetitionMonthsOpen', 26),\n ('Promo2Weeks', 27),\n ('StoreType', 5),\n ('Assortment', 4),\n ('PromoInterval', 4),\n ('CompetitionOpenSinceYear', 24),\n ('Promo2SinceYear', 9),\n ('State', 13),\n ('Week', 53),\n ('Events', 22),\n ('Promo_fw', 7),\n ('Promo_bw', 7),\n ('StateHoliday_fw', 4),\n ('StateHoliday_bw', 4),\n ('SchoolHoliday_fw', 9),\n ('SchoolHoliday_bw', 9)]*\n```", "```py\nemb_szs = [(c, min(50, (c+1)//2)) **for** _,c **in** cat_sz]\nemb_szs*[(1116, 50),\n (8, 4),\n (4, 2),\n (13, 7),\n (32, 16),\n (3, 2),\n (26, 13),\n (27, 14),\n (5, 3),\n (4, 2),\n (4, 2),\n (24, 12),\n (9, 5),\n (13, 7),\n (53, 27),\n (22, 11),\n (7, 4),\n (7, 4),\n (4, 2),\n (4, 2),\n (9, 5),\n (9, 5)]*\n```", "```py\nm = md.get_learner(emb_szs, len(df.columns)-len(cat_vars),\n                   0.04, 1, [1000,500], [0.001,0.01], y_range=y_range)\nm.summary()\n```", "```py\nm.fit(lr, 1, metrics=[exp_rmspe])*[ 0\\.       0.01456  0.01544  0.1148 ]*m.fit(lr, 3, metrics=[exp_rmspe])*[ 0\\.       0.01418  0.02066  0.12765]                           \n[ 1\\.       0.01081  0.01276  0.11221]                           \n[ 2\\.       0.00976  0.01233  0.10987]*m.fit(lr, 3, metrics=[exp_rmspe], cycle_len=1)*[ 0\\.       0.00801  0.01081  0.09899]                            \n[ 1\\.       0.00714  0.01083  0.09846]                            \n[ 2\\.       0.00707  0.01088  0.09878]*\n```"]