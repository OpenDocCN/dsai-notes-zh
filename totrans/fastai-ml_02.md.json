["```py\ndf_raw.SalePrice = np.log(df_raw.SalePrice)\n```", "```py\nm = RandomForestRegressor(n_jobs=-1)\nm.fit(df, y)\nm.score(df, y)*0.98304680998313232*\n```", "```py\n**def** split_vals(a,n): **return** a[:n].copy(), a[n:].copy()n_valid = 12000  # same as Kaggle's test set size\nn_trn = len(df)-n_valid\nraw_train, raw_valid = split_vals(df_raw, n_trn)\nX_train, X_valid = split_vals(df, n_trn)\ny_train, y_valid = split_vals(y, n_trn)X_train.shape, y_train.shape, X_valid.shape*((389125, 66), (389125,), (12000, 66))*\n```", "```py\n**def** rmse(x,y): **return** math.sqrt(((x-y)**2).mean())\n```", "```py\ndf_trn, y_trn, nas = proc_df(df_raw, 'SalePrice', **subset=30000**, \n                     na_dict=nas)\nX_train, _ = split_vals(df_trn, 20000)\ny_train, _ = split_vals(y_trn, 20000)\n```", "```py\nm = RandomForestRegressor(**n_estimators=1**, max_depth=3,\n                          bootstrap=**False**, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)\n```", "```py\nm = RandomForestRegressor(n_estimators=1, bootstrap=**False**, \n                          n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)*[6.5267517864504e-17, 0.3847365289469930, 1.0, 0.73565273648797624]*\n```", "```py\nm = RandomForestRegressor(n_jobs=-1) \nm.fit(X_train, y_train) \nprint_score(m)\n```", "```py\npreds = np.stack([t.predict(X_valid) **for** t **in** m.estimators_]) preds[:,0], np.mean(preds[:,0]), y_valid[0]*(array([ 9.21034,  8.9872 ,  8.9872 ,  8.9872 ,  8.9872 ,  9.21034,  8.92266,  9.21034,  9.21034,  8.9872 ]),  \n9.0700003890739005,  \n9.1049798563183568)*preds.shape\n*(10, 12000)*\n```", "```py\nm = RandomForestRegressor(n_estimators=40, n_jobs=-1, \n                          **oob_score=True**)\nm.fit(X_train, y_train)\nprint_score(m)*[0.10198464613020647, 0.2714485881623037, 0.9786192457999483, 0.86840992079038759, 0.84831537630038534]*\n```", "```py\ndf_trn, y_trn = proc_df(df_raw, 'SalePrice')\nX_train, X_valid = split_vals(df_trn, n_trn)\ny_train, y_valid = split_vals(y_trn, n_trn)set_rf_samples(20000)\n```", "```py\nreset_rf_samples()m = RandomForestRegressor(n_estimators=40, n_jobs=-1, \n                          oob_score=**True**)\nm.fit(X_train, y_train)\nprint_score(m)*[0.07843013746508616, 0.23879806957665775, 0.98490742269867626, 0.89816206196980131, 0.90838819297302553]*\n```", "```py\nm = RandomForestRegressor(n_estimators=40, **min_samples_leaf**=3, \n                          n_jobs=-1, oob_score=**True**) \nm.fit(X_train, y_train) \nprint_score(m)*[0.11595869956476182, 0.23427349924625201, 0.97209195463880227, 0.90198460308551043, 0.90843297242839738]*\n```", "```py\nm = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, \n                      max_features=0.5, n_jobs=-1, oob_score=**True**) m.fit(X_train, y_train) \nprint_score(m)*[0.11926975747908228, 0.22869111042050522, 0.97026995966445684, 0.9066000722129437, 0.91144914977164715]*\n```"]