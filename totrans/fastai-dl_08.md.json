["```py\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2from fastai.conv_learner import *\nfrom fastai.dataset import *from pathlib import Path\nimport json\nfrom PIL import ImageDraw, ImageFont\nfrom matplotlib import patches, patheffects\n# torch.cuda.set_device(1) \n```", "```py\nPATH = Path('data/pascal')\nlist(PATH.iterdir())*[PosixPath('data/pascal/PASCAL_VOC.zip'),\n PosixPath('data/pascal/VOCdevkit'),\n PosixPath('data/pascal/VOCtrainval_06-Nov-2007.tar'),\n PosixPath('data/pascal/pascal_train2012.json'),\n PosixPath('data/pascal/pascal_val2012.json'),\n PosixPath('data/pascal/pascal_val2007.json'),\n PosixPath('data/pascal/pascal_train2007.json'),\n PosixPath('data/pascal/pascal_test2007.json')]*\n```", "```py\ntrn_j = json.load((PATH/'pascal_train2007.json').open())\ntrn_j.keys()*dict_keys(['images', 'type', 'annotations', 'categories'])*\n```", "```py\nIMAGES,ANNOTATIONS,CATEGORIES = ['images', 'annotations', \n                                 'categories'] **trn_j[IMAGES]**[:5]*[{'file_name': '000012.jpg', 'height': 333, 'id': 12, 'width': 500},  {'file_name': '000017.jpg', 'height': 364, 'id': 17, 'width': 480},  {'file_name': '000023.jpg', 'height': 500, 'id': 23, 'width': 334},  {'file_name': '000026.jpg', 'height': 333, 'id': 26, 'width': 500},  {'file_name': '000032.jpg', 'height': 281, 'id': 32, 'width': 500}]*\n```", "```py\n**trn_j[ANNOTATIONS]**[:2]*[{'area': 34104,\n  'bbox': [155, 96, 196, 174],\n  'category_id': 7,\n  'id': 1,\n  'ignore': 0,\n  'image_id': 12,\n  'iscrowd': 0,\n  'segmentation': [[155, 96, 155, 270, 351, 270, 351, 96]]},\n {'area': 13110,\n  'bbox': [184, 61, 95, 138],\n  'category_id': 15,\n  'id': 2,\n  'ignore': 0,\n  'image_id': 17,\n  'iscrowd': 0,\n  'segmentation': [[184, 61, 184, 199, 279, 199, 279, 61]]}]*\n```", "```py\n**trn_j[CATEGORIES]**[:4]*[{'id': 1, 'name': 'aeroplane', 'supercategory': 'none'},\n {'id': 2, 'name': 'bicycle', 'supercategory': 'none'},\n {'id': 3, 'name': 'bird', 'supercategory': 'none'},\n {'id': 4, 'name': 'boat', 'supercategory': 'none'}]*\n```", "```py\nFILE_NAME,ID,IMG_ID,CAT_ID,BBOX = \n                   'file_name','id','image_id','category_id','bbox'cats = dict((o[ID], o['name']) for o in trn_j[CATEGORIES])\ntrn_fns = dict((o[ID], o[FILE_NAME]) for o in trn_j[IMAGES])\ntrn_ids = [o[ID] for o in trn_j[IMAGES]]\n```", "```py\nlist((PATH/'VOCdevkit'/'VOC2007').iterdir())*[PosixPath('data/pascal/VOCdevkit/VOC2007/JPEGImages'),\n PosixPath('data/pascal/VOCdevkit/VOC2007/SegmentationObject'),\n PosixPath('data/pascal/VOCdevkit/VOC2007/ImageSets'),\n PosixPath('data/pascal/VOCdevkit/VOC2007/SegmentationClass'),\n PosixPath('data/pascal/VOCdevkit/VOC2007/Annotations')]*JPEGS = 'VOCdevkit/VOC2007/JPEGImages'IMG_PATH = PATH/JPEGS\nlist(IMG_PATH.iterdir())[:5]*[PosixPath('data/pascal/VOCdevkit/VOC2007/JPEGImages/007594.jpg'),\n PosixPath('data/pascal/VOCdevkit/VOC2007/JPEGImages/005682.jpg'),\n PosixPath('data/pascal/VOCdevkit/VOC2007/JPEGImages/005016.jpg'),\n PosixPath('data/pascal/VOCdevkit/VOC2007/JPEGImages/001930.jpg'),\n PosixPath('data/pascal/VOCdevkit/VOC2007/JPEGImages/007666.jpg')]*\n```", "```py\nim0_d = trn_j[IMAGES][0]\nim0_d[FILE_NAME],im0_d[ID]('000012.jpg', 12)\n```", "```py\ntrn_anno = **collections.defaultdict**(lambda:[])\nfor o in trn_j[ANNOTATIONS]:\n    if not o['ignore']:\n        bb = o[BBOX]\n        bb = np.array([bb[1], bb[0], bb[3]+bb[1]-1, bb[2]+bb[0]-1])\n        trn_anno[o[IMG_ID]]**.append**((bb,o[CAT_ID]))\n\nlen(trn_anno)*2501*\n```", "```py\nim0_a = im_a[0]; im0_a*[(array(****[ 96, 155, 269, 350]****),* ***7****)]*im0_a = im_a[0]; im0_a*(array([ 96, 155, 269, 350]), 7)*cats[7]*'car'*\n```", "```py\ntrn_anno[17]*[(array([61, 184, 198, 278]), 15), (array([77, 89, 335, 402]), 13)]*cats[15],cats[13]*('person', 'horse')*\n```", "```py\ndef bb_hw(a): return np.array([a[1],a[0],a[3]-a[1],a[2]-a[0]])\n```", "```py\nim = open_image(IMG_PATH/im0_d[FILE_NAME])\n```", "```py\ndef show_img(im, figsize=None, ax=None):\n    if not ax: fig,ax = plt.subplots(figsize=figsize)\n    ax.imshow(im)\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n    return ax\n```", "```py\ndef draw_outline(o, lw):\n    o.set_path_effects([patheffects.Stroke(\n        linewidth=lw, foreground='black'), patheffects.Normal()])\n```", "```py\ndef draw_rect(ax, b):\n    patch = ax.add_patch(patches.Rectangle(b[:2], *b[-2:], \n                         fill=False, edgecolor='white', lw=2))\n    draw_outline(patch, 4)def draw_text(ax, xy, txt, sz=14):\n    text = ax.text(*xy, txt, verticalalignment='top', color='white',\n                   fontsize=sz, weight='bold')\n    draw_outline(text, 1)ax = show_img(im)\nb = bb_hw(im0_a[0])\ndraw_rect(ax, b)\ndraw_text(ax, b[:2], cats[im0_a[1]])\n```", "```py\n**def** draw_im(im, ann):\n    ax = show_img(im, figsize=(16,8))\n    **for** b,c **in** ann:\n        b = bb_hw(b)\n        draw_rect(ax, b)\n        draw_text(ax, b[:2], cats[c], sz=16)**def** draw_idx(i):\n    im_a = trn_anno[i]\n    im = open_image(IMG_PATH/trn_fns[i])\n    print(im.shape)\n    draw_im(im, im_a)draw_idx(17)\n```", "```py\n**def** get_lrg(b):\n    if not b: raise Exception()\n    b = sorted(b, key=lambda x: np.product(x[0][-2:]-x[0][:2]), \n               reverse=True)\n    **return** b[0]\n```", "```py\ntrn_lrg_anno = {a: get_lrg(b) for a,b in trn_anno.items()}\n```", "```py\nb,c = trn_lrg_anno[23]\nb = bb_hw(b)\nax = show_img(open_image(IMG_PATH/trn_fns[23]), figsize=(5,10))\ndraw_rect(ax, b)\ndraw_text(ax, b[:2], cats[c], sz=16)\n```", "```py\n(PATH/'tmp').mkdir(exist_ok=True)\nCSV = PATH/'tmp/lrg.csv'\n```", "```py\ndf = pd.DataFrame({'fn': [trn_fns[o] for o in trn_ids],\n    'cat': [cats[trn_lrg_anno[o][1]] for o in trn_ids]}, \n    columns=['fn','cat'])\ndf.to_csv(CSV, index=False)f_model = resnet34\nsz=224\nbs=64\n```", "```py\ntfms = tfms_from_model(f_model, sz, aug_tfms=transforms_side_on, \n                       crop_type=**CropType.NO**)\nmd = ImageClassifierData.from_csv(PATH, JPEGS, CSV, tfms=tfms)\n```", "```py\nx,y=next(iter(md.val_dl))\nshow_img(md.val_ds.denorm(to_np(x))[0]);\n```", "```py\nx,y=next(iter(md.val_dl))\n```", "```py\nshow_img(md.val_ds.denorm(to_np(x))[0]);\n```", "```py\nlearn = ConvLearner.pretrained(f_model, md, metrics=[accuracy])\nlearn.opt_fn = optim.Adamlrf=learn.lr_find(1e-5,100)\nlearn.sched.plot()\n```", "```py\nlearn.sched.plot(n_skip=5, n_skip_end=1)\n```", "```py\nlr = 2e-2\nlearn.fit(lr, 1, cycle_len=1)*epoch      trn_loss   val_loss   accuracy                      \n    0      1.280753   0.604127   0.806941*\n```", "```py\nlrs = np.array([lr/1000,lr/100,lr])\nlearn.freeze_to(-2)\nlearn.fit(lrs/5, 1, cycle_len=1)*epoch      trn_loss   val_loss   accuracy                      \n    0      0.780925   0.575539   0.821064*\n```", "```py\nlearn.unfreeze()\nlearn.fit(lrs/5, 1, cycle_len=2)epoch      trn_loss   val_loss   accuracy                       \n    0      0.676254   0.546998   0.834285       \n    1      0.460609   0.533741   0.833233\n```", "```py\nfig, axes = plt.subplots(3, 4, figsize=(12, 8))\nfor i,ax in enumerate(axes.flat):\n    ima=md.val_ds.denorm(x)[i]\n    b = md.classes[preds[i]]\n    ax = show_img(ima, ax=ax)\n    draw_text(ax, (0,0), b)\nplt.tight_layout()\n```", "```py\nBB_CSV = PATH/'tmp/bb.csv'\nbb = np.array([trn_lrg_anno[o][0] for o in trn_ids])\nbbs = [' '.join(str(p) for p in o) for o in bb]df = pd.DataFrame({'fn': [trn_fns[o] for o in trn_ids], \n                   'bbox': bbs}, columns=['fn','bbox'])\ndf.to_csv(BB_CSV, index=False)BB_CSV.open().readlines()[:5]*['fn,bbox\\n',\n '000012.jpg,96 155 269 350\\n',\n '000017.jpg,77 89 335 402\\n',\n '000023.jpg,1 2 461 242\\n',\n '000026.jpg,124 89 211 336\\n']*\n```", "```py\nf_model=resnet34\nsz=224\nbs=64\n```", "```py\ntfms = tfms_from_model(f_model, sz, crop_type=CropType.NO, \n                       **tfm_y=TfmType.COORD**)\nmd = ImageClassifierData.from_csv(PATH, JPEGS, BB_CSV, tfms=tfms, \n                                  **continuous=True**)\n```", "```py\nx,y=next(iter(md.val_dl))ima=md.val_ds.denorm(to_np(x))[0]\nb = bb_hw(to_np(y[0])); b*array([  49.,    0.,  131.,  205.], dtype=float32)*ax = show_img(ima)\ndraw_rect(ax, b)\ndraw_text(ax, b[:2], 'label')\n```", "```py\nhead_reg4 = nn.Sequential(Flatten(), nn.Linear(25088,4))\nlearn = ConvLearner.pretrained(f_model, md, **custom_head**=head_reg4)\nlearn.opt_fn = optim.Adam\nlearn.crit = nn.L1Loss()\n```", "```py\nlearn.lr_find(1e-5,100)\nlearn.sched.plot(5)78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 25/32 [00:04<00:01,  6.16it/s, loss=395]\n```", "```py\nlr = 2e-3\nlearn.fit(lr, 2, cycle_len=1, cycle_mult=2)*epoch      trn_loss   val_loss                            \n    0      49.523444  34.764141 \n    1      36.864003  28.007317                           \n    2      30.925234  27.230705*lrs = np.array([lr/100,lr/10,lr])\nlearn.freeze_to(-2)\nlrf=learn.lr_find(lrs/1000)\nlearn.sched.plot(1)\n```", "```py\nlearn.fit(lrs, 2, cycle_len=1, cycle_mult=2)*epoch      trn_loss   val_loss                            \n    0      25.616161  22.83597  \n    1      21.812624  21.387115                           \n    2      17.867176  20.335539*learn.freeze_to(-3)\nlearn.fit(lrs, 1, cycle_len=2)*epoch      trn_loss   val_loss                            \n    0      16.571885  20.948696 \n    1      15.072718  19.925312*\n```", "```py\nlearn.save('reg4')\n```", "```py\nx,y = next(iter(md.val_dl))\nlearn.model.eval()\npreds = to_np(learn.model(VV(x)))fig, axes = plt.subplots(3, 4, figsize=(12, 8))\n**for** i,ax **in** enumerate(axes.flat):\n    ima=md.val_ds.denorm(to_np(x))[i]\n    b = bb_hw(preds[i])\n    ax = show_img(ima, ax=ax)\n    draw_rect(ax, b)\nplt.tight_layout()\n```"]