["```py\n%load_ext autoreload\n%autoreload 2\n%matplotlib inlinefrom fastai.imports import *\nfrom fastai.structured import *from pandas_summary import DataFrameSummary\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom IPython.display import displayfrom sklearn import metrics\n```", "```py\ndf_raw = pd.read_csv(f'{PATH}Train.csv', low_memory=False, \n                     parse_dates=[\"saledate\"])\n```", "```py\ndef display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000): \n        with pd.option_context(\"display.max_columns\", 1000): \n            display(df)display_all(df_raw.tail().transpose())\n```", "```py\ndf_raw.SalePrice = np.log(df_raw.SalePrice)\n```", "```py\nm = RandomForestRegressor(n_jobs=-1)\n```", "```py\nm.fit(df_raw.drop('SalePrice', axis=1), df_raw.SalePrice)\n```", "```py\ndef add_datepart(df, fldname, **drop=True**):\n    fld = df[fldname]\n    if not np.issubdtype(fld.dtype, np.datetime64):\n        df[fldname] = fld = pd.to_datetime(fld, \n                                     infer_datetime_format=True)\n    targ_pre = re.sub('[Dd]ate$', '', fldname)\n    for n in ('Year', 'Month', 'Week', 'Day', 'Dayofweek', \n            'Dayofyear', 'Is_month_end', 'Is_month_start', \n            'Is_quarter_end', 'Is_quarter_start', 'Is_year_end', \n            'Is_year_start'):\n        df[targ_pre+n] = **getattr**(fld.dt,n.lower()) df[targ_pre+'Elapsed'] = fld.astype(np.int64) // 10**9\n    if drop: df.drop(fldname, axis=1, inplace=True)\n```", "```py\nfld = df_raw.saledate\nfld.dt.year\n```", "```py\nadd_datepart(df_raw, 'saledate')\ndf_raw.saleYear.head()\n```", "```py\ntrain_cats(df_raw)\ndf_raw.UsageBand.cat.categories*Index(['High', 'Low', 'Medium'], dtype='object)*\n```", "```py\ndf_raw.UsageBand.cat.set_categories(['High', 'Medium', 'Low'],\n    ordered=True, inplace=True)\n```", "```py\ndisplay_all(df_raw.isnull().sum().sort_index()/len(df_raw))\n```", "```py\nos.makedirs('tmp', exist_ok=True)\ndf_raw.to_feather('tmp/bulldozers-raw')\n```", "```py\ndf_raw = pd.read_feather('tmp/raw')\n```", "```py\ndf, y, nas = proc_df(df_raw, 'SalePrice')\n```", "```py\ndf.head()\n```", "```py\nm = RandomForestRegressor(n_jobs=-1)\nm.fit(df, y)\nm.score(df,y)\n```", "```py\ndef split_vals(a,n): return a[:n].copy(), a[n:].copy()n_valid = 12000  # same as Kaggle's test set size\nn_trn = len(df)-n_valid\nraw_train, raw_valid = split_vals(df_raw, n_trn)\nX_train, X_valid = split_vals(df, n_trn)\ny_train, y_valid = split_vals(y, n_trn)X_train.shape, y_train.shape, X_valid.shape*((389125, 66), (389125,), (12000, 66))*\n```", "```py\ndef rmse(x,y): return math.sqrt(((x-y)**2).mean())def print_score(m):\n    res = [rmse(m.predict(X_train), y_train),\n           rmse(m.predict(X_valid), y_valid),\n           m.score(X_train, y_train), m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print(res)m = RandomForestRegressor(n_jobs=-1)\n%time m.fit(X_train, y_train)\nprint_score(m)*CPU times: user 1min 3s, sys: 356 ms, total: 1min 3s\nWall time: 8.46 s\n[0.09044244804386327, 0.2508166961122146,* ***0.98290459302099709****,* ***0.88765316048270615****]*\n```"]