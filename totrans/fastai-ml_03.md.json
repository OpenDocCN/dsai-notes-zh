["```py\ntypes = {'id': 'int64',\n         'item_nbr': 'int32',\n         'store_nbr': 'int8',\n         'unit_sales': 'float32',\n         'onpromotion': 'object'}%%time\ndf_all = pd.read_csv(f'{PATH}train.csv', parse_dates=['date'], \n                     dtype=types, infer_datetime_format=True)*CPU times: user 1min 41s, sys: 5.08s, total: 1min 46s\nWall time: 1min 48s*\n```", "```py\ndf_all.onpromotion.fillna(False, inplace=True)\ndf_all.onpromotion = df_all.onpromotion.map({'False': False, \n                                             'True': True})\ndf_all.onpromotion = df_all.onpromotion.astype(bool)%time df_all.to_feather('tmp/raw_groceries')\n```", "```py\n%time df_all.describe(include='all')\n```", "```py\ndf_test = pd.read_csv(f'{PATH}test.csv', parse_dates = ['date'],\n                      dtype=types, infer_datetime_format=True)df_test.onpromotion.fillna(False, inplace=True)\ndf_test.onpromotion = df_test.onpromotion.map({'False': False, \n                                               'True': True})\ndf_test.onpromotion = df_test.onpromotion.astype(bool)\ndf_test.describe(include='all')\n```", "```py\ndf_all.tail()\n```", "```py\ndf_all.unit_sales = np.log1p(np.clip(df_all.unit_sales, 0, None))\n```", "```py\n%time add_datepart(df_all, 'date')*CPU times: user 1min 35s, sys: 16.1 s, total: 1min 51s\nWall time: 1min 53s*\n```", "```py\nn_valid = len(df_test)\nn_trn = len(df_all) - n_valid\ntrain, valid = split_vals(df_all, n_trn)\ntrain.shape, valid.shape*((122126576, 18), (3370464, 18))*\n```", "```py\n%%time\ntrn, y, nas  = proc_df(train, 'unit_sales')\nval, y_val, nas = proc_df(valid, 'unit_sales', nas)\n```", "```py\ndef rmse(x,y): return math.sqrt(((x-y)**2).mean())def print_score(m):\n    res = [rmse(m.predict(X_train), y_train),\n           rmse(m.predict(X_valid), y_valid),\n           m.score(X_train, y_train), m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print(res)\n```", "```py\n**set_rf_samples(1_000_000)**%time x = **np.array(trn, dtype=np.float32)***CPU times: user 1min 17s, sys: 18.9 s, total: 1min 36s\nWall time: 1min 37s*m = RandomForestRegressor(n_estimators=20, min_samples_leaf=100, \n                          n_jobs=8)\n%time m.fit(x, y)\n```", "```py\n%prun m.fit(x, y)\n```", "```py\nprint_score(m)*[0.7726754289860,* ***0.7658818632043****, 0.23234198105350, 0.2193243264]*\n```", "```py\nm = RandomForestRegressor(n_estimators=20, **min_samples_leaf=10**, \n                          n_jobs=8)\n%time m.fit(x, y)\n```", "```py\nm = RandomForestRegressor(n_estimators=20, **min_samples_leaf=3**, \n                          n_jobs=8)\n%time m.fit(x, y)\n```", "```py\nPATH = \"data/bulldozers/\"\n\ndf_raw = pd.read_feather('tmp/raw')\ndf_trn, y_trn, nas = proc_df(df_raw, 'SalePrice')\n```", "```py\n**def** split_vals(a,n): **return** a[:n], a[n:]n_valid = 12000\nn_trn = len(df_trn)-n_valid\nX_train, X_valid = split_vals(df_trn, n_trn)\ny_train, y_valid = split_vals(y_trn, n_trn)\nraw_train, raw_valid = split_vals(df_raw, n_trn)\n```", "```py\n## From lesson1-rf.ipynbdf_trn, y_trn, **nas** = proc_df(df_raw, 'SalePrice', subset=30000, \n                             na_dict=**nas**)\nX_train, _ = split_vals(df_trn, 20000)\ny_train, _ = split_vals(y_trn, 20000)\n```", "```py\nset_rf_samples(50000)m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, \n                        max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)\n```", "```py\n%time preds = np.stack([t.predict(X_valid) **for** t **in** m.estimators_])\nnp.mean(preds[:,0]), np.std(preds[:,0])*CPU times: user 1.38 s, sys: 20 ms, total: 1.4 s\nWall time: 1.4 s**(9.1960278072006023, 0.21225113407342761)*\n```", "```py\ndef get_preds(t): return t.predict(X_valid)\n%time preds = np.stack(**parallel_trees**(m, get_preds))\nnp.mean(preds[:,0]), np.std(preds[:,0])*CPU times: user 100 ms, sys: 180 ms, total: 280 ms\nWall time: 505 ms**(9.1960278072006023, 0.21225113407342761)*\n```", "```py\nx = raw_valid.copy()\nx['pred_std'] = np.std(preds, axis=0)\nx['pred'] = np.mean(preds, axis=0)\nx.Enclosure.value_counts().plot.barh();\n```", "```py\nflds = ['Enclosure', 'SalePrice', 'pred', 'pred_std']\nenc_summ = x[flds].groupby('Enclosure', as_index=False).mean()\nenc_summ\n```", "```py\nenc_summ = enc_summ[~pd.isnull(enc_summ.SalePrice)]\nenc_summ.plot('Enclosure', 'SalePrice', 'barh', xlim=(0,11));\n```", "```py\nenc_summ.plot('Enclosure', 'pred', 'barh', xerr='pred_std', \n              alpha=0.6, xlim=(0,11));\n```", "```py\nraw_valid.ProductSize.value_counts().plot.barh();\n```", "```py\nflds = ['ProductSize', 'SalePrice', 'pred', 'pred_std']\nsumm = x[flds].groupby(flds[0]).mean()\nsumm\n```", "```py\n(summ.pred_std/summ.pred).sort_values(ascending=False)\n```", "```py\nfi = rf_feat_importance(m, df_trn); fi[:10]\n```", "```py\nfi.plot('cols', 'imp', figsize=(10,6), legend=False);\n```", "```py\n**def** plot_fi(fi): \n  return fi.plot('cols','imp','barh', figsize=(12,7), legend=False)plot_fi(fi[:30]);\n```", "```py\nto_keep = fi[fi.imp>0.005].cols; len(to_keep)df_keep = df_trn[to_keep].copy()\nX_train, X_valid = split_vals(df_keep, n_trn)m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, \n                       max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)*[0.20685390156773095, 0.24454842802383558, 0.91015213846294174, 0.89319840835270514, 0.8942078920004991]*\n```", "```py\nfi = rf_feat_importance(m, df_keep)\nplot_fi(fi);\n```"]